# This workflow will build, test, sign and package a WinUI 3 Desktop Application
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]
      fail-fast: false


    runs-on: windows-latest

    env:
      Solution_Name: Algorithm Dynamics.sln                                                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src\Algorithm Dynamics.Test\Algorithm Dynamics.Test.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: src\Algorithm Dynamics\Algorithm Dynamics (Package)                    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: src\Algorithm Dynamics\Algorithm Dynamics (Package)\Algorithm Dynamics (Package).wapproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      working-directory: src
      run: dotnet test

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.TEMPORARYKEY_ENCODED }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "Algorithm Dynamics (Package)_TemporaryKey.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj)
      working-directory: src
      run: msbuild $env:Solution_Name /restore /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:PfxPath /p:PackageCertificatePassword="${{ secrets.Pfx_Key }}" -m
      env:
        AppxBundle: Always
        BuildMode: SideLoadOnly
        Configuration: ${{ matrix.configuration }}
        TargetPlatform: x64
        PfxPath: Algorithm Dynamics (Package)_TemporaryKey.pfx

    # Remove the pfx
    - name: Remove the pfx
      run: |
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "Algorithm Dynamics (Package)_TemporaryKey.pfx"
        Remove-Item -path $certificatePath

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
