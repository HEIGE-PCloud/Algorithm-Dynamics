name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build-report:
    name: Build Report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build graphs
        run: |
          npm install @mermaid-js/mermaid-cli
          python report/graphs/build_graphs.py --command ./node_modules/.bin/mmdc

      - name: Build Report
        uses: xu-cheng/latex-action@v2
        with:
          root_file: report.tex
          working_directory: report
          extra_system_packages: "py-pygments"
          latexmk_shell_escape: true
          latexmk_use_xelatex: true

      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: Report
          path: report/report.pdf

  test-app:
    name: Test App
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Execute all unit tests in the solution
    - name: Execute unit tests
      working-directory: src\Algorithm Dynamics.Test
      run: dotnet test

  build-app:
    name: Build App
    runs-on: windows-latest
    env:
      Solution_Name: Algorithm Dynamics.sln
      Project_Directory: src\Algorithm Dynamics
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      id: decodepfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.AlgorithmDynamics_TemporaryKey }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath AlgorithmDynamics_TemporaryKey.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        echo "::set-output name=cert_path::$certificatePath"

    - name: Create the x86 app package
      working-directory: src
      env:
        Solution_Name: Algorithm Dynamics.sln
        Appx_Bundle_Platforms: x86|x64|arm64
        Platform: x86
        Configuration: Release
        Appx_Package_Build_Mode: StoreUpload
        Appx_Bundle: Never
        Appx_Package_Dir: AppPackages\
      run: |
        msbuild "$env:Solution_Name" /restore /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Platform="$env:Platform" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=AlgorithmDynamics_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true -m
        mkdir Bundle
        Copy-item -Force -Recurse '.\Algorithm Dynamics\AppPackages\**\*.msix' Bundle\.

    - name: Create the x64 app package
      working-directory: src
      env:
        Solution_Name: Algorithm Dynamics.sln
        Appx_Bundle_Platforms: x86|x64|arm64
        Platform: x64
        Configuration: Release
        Appx_Package_Build_Mode: StoreUpload
        Appx_Bundle: Never
        Appx_Package_Dir: AppPackages\
      run: |
        msbuild "$env:Solution_Name" /restore /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Platform="$env:Platform" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=AlgorithmDynamics_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true -m
        Copy-item -Force -Recurse '.\Algorithm Dynamics\AppPackages\**\*.msix' Bundle\.

    - name: Create the arm64 app package
      working-directory: src
      env:
        Solution_Name: Algorithm Dynamics.sln
        Appx_Bundle_Platforms: x86|x64|arm64
        Platform: arm64
        Configuration: Release
        Appx_Package_Build_Mode: StoreUpload
        Appx_Bundle: Never
        Appx_Package_Dir: AppPackages\
      run: |
        msbuild "$env:Solution_Name" /restore /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Platform="$env:Platform" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=AlgorithmDynamics_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true -m
        Copy-item -Force -Recurse '.\Algorithm Dynamics\AppPackages\**\*.msix' Bundle\.

    # - name: Create MSIX Bundle
    #   uses: HEIGE-PCloud/Action-MsixBundler@v1.0.1
    #   with:
    #     msix-folder: src\Bundle
    #     msixbundle-filepath: src\Bundle\Algorithm Dynamics_x86_x64_arm64.msixbundle
    #     msixbundle-version: "0.1.0.0"
    #     enable-bundle-signing: true
    #     certificate-path: ${{ steps.decodepfx.outputs.cert_path }}
    #     certificate-private-key: ""

    # Remove the pfx
    - name: Remove the pfx
      run: |
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath AlgorithmDynamics_TemporaryKey.pfx
        Remove-Item -path $certificatePath

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: MSIX Package Release
    #     path: src\Bundle\*.msixbundle

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-report, test-app, build-app]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Prepare report
        uses: actions/download-artifact@v2
        with:
          name: Report
          path: website/static

      - name: Prepare app
        uses: actions/download-artifact@v2
        with:
          name: MSIX Package Release
          path: website/static/install

      - name: Build website
        run: | 
          sudo npm i -g postcss postcss-cli autoprefixer
          cd website
          hugo --minify

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: website/public
          
      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: |
            Report
            MSIX Package Release
          failOnError: false
