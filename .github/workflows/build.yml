name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build-report:
    name: Build Report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build graphs
        run: |
          npm install @mermaid-js/mermaid-cli
          python report/graphs/build_graphs.py --command ./node_modules/.bin/mmdc

      - name: Build Report
        uses: xu-cheng/latex-action@v2
        with:
          root_file: report.tex
          working_directory: report
          extra_system_packages: "py-pygments"
          latexmk_shell_escape: true
          latexmk_use_xelatex: true

      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: Report
          path: report/report.pdf

  test-app:
    name: Test App
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Execute all unit tests in the solution
    - name: Execute unit tests
      working-directory: src
      run: dotnet test
      continue-on-error: true

  build-app:
    name: Build App
    if: ${{ false }}
    runs-on: windows-latest
    env:
      Solution_Name: Algorithm Dynamics.sln                                                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src\Algorithm Dynamics.Test\Algorithm Dynamics.Test.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: src\Algorithm Dynamics\Algorithm Dynamics (Package)                    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: src\Algorithm Dynamics\Algorithm Dynamics (Package)\Algorithm Dynamics (Package).wapproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.TEMPORARYKEY_ENCODED }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "Algorithm Dynamics (Package)_TemporaryKey.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj)
      working-directory: src
      run: msbuild $env:Solution_Name /restore /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:PfxPath /p:PackageCertificatePassword="${{ secrets.Pfx_Key }}" -m
      env:
        AppxBundle: Always
        BuildMode: SideLoadOnly
        Configuration: Release
        TargetPlatform: x64
        PfxPath: Algorithm Dynamics (Package)_TemporaryKey.pfx

    # Remove the pfx
    - name: Remove the pfx
      run: |
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "Algorithm Dynamics (Package)_TemporaryKey.pfx"
        Remove-Item -path $certificatePath

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package Release
        path: ${{ env.Wap_Project_Directory }}\AppPackages

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-report, test-app]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Prepare report
        uses: actions/download-artifact@v2
        with:
          name: Report
          path: website/static

      - name: Prepare app
        if: ${{ false }}
        uses: actions/download-artifact@v2
        with:
          name: MSIX Package Release
          path: website/static/install

      - name: Build website
        run: | 
          sudo npm i -g postcss postcss-cli autoprefixer
          cd website
          hugo --minify

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: website/public
          
      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: |
            Report
            MSIX Package Release
          failOnError: false
